/*
 * Copyright (C) 2011 Everit Kft. (http://www.everit.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.everit.osgi.dev.e4.plugin.testresult;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/**
 * Handler that parses the test results generated by test runner and adds the results to the
 * summarizer.
 */
public class TestResultSAXHandler extends DefaultHandler {

  /**
   * Helper methods to store the attributes of the current testsuite element.
   */
  private static class TestSuiteAttributes {

    final int errors;

    final int failures;

    final String name;

    final int skipped;

    final int tests;

    final String time;

    TestSuiteAttributes(final String name, final String time, final int tests, final int errors,
        final int failures, final int skipped) {
      this.name = name;
      this.time = time;
      this.errors = errors;
      this.failures = failures;
      this.skipped = skipped;
      this.tests = tests;
    }
  }

  private boolean inErrorOrFailureElement = false;

  private boolean testCaseHadErrorOrFailure = false;

  private final TestResultSummarizer testResultSummarizer;

  private TestSuiteAttributes testSuiteAttributes = null;

  public TestResultSAXHandler(final TestResultSummarizer testResultSummarizer) {
    this.testResultSummarizer = testResultSummarizer;
  }

  private void addEmptyTestSuite() {

    testResultSummarizer.xmlBody.append("  <testcase name=\"").append(testSuiteAttributes.name)
        .append("\" classname=\"").append(testSuiteAttributes.name).append("\" time=\"")
        .append(testSuiteAttributes.time).append("\" ignored=\"true\"/>\n");

    testResultSummarizer.ignored++;
    testResultSummarizer.tests++;
    testResultSummarizer.started++;
  }

  @Override
  public void characters(final char[] ch, final int start, final int length) throws SAXException {
    if (inErrorOrFailureElement) {
      testResultSummarizer.xmlBody.append(ch, start, length);
    }

  }

  @Override
  public void endElement(final String uri, final String localName, final String qName)
      throws SAXException {

    switch (qName) {
      case "error":
        testResultSummarizer.xmlBody.append("      </error>\n");
        inErrorOrFailureElement = false;
        break;
      case "failure":
        testResultSummarizer.xmlBody.append("      </failure>\n");
        inErrorOrFailureElement = false;
        break;
      case "testcase":
        if (testCaseHadErrorOrFailure) {
          testResultSummarizer.xmlBody.append("    </testcase>\n");
          testCaseHadErrorOrFailure = false;
        } else {
          testResultSummarizer.xmlBody.append("/>\n");
        }
        break;
      case "testsuite":
        if (testSuiteAttributes != null) {
          addEmptyTestSuite();
          testSuiteAttributes = null;
        } else {
          testResultSummarizer.xmlBody.append("  </testsuite>\n");
        }
        break;
      default:
        break;
    }

  }

  @Override
  public void startElement(final String uri, final String localName, final String qName,
      final Attributes attributes) throws SAXException {

    switch (qName) {
      case "testsuite":
        this.testSuiteAttributes =
            new TestSuiteAttributes(attributes.getValue("name"), attributes.getValue("time"),
                Integer.parseInt(attributes.getValue("tests")),
                Integer.parseInt(attributes.getValue("errors")),
                Integer.parseInt(attributes.getValue("failures")),
                Integer.parseInt(attributes.getValue("skipped")));
        break;
      case "testcase":
        if (testSuiteAttributes != null) {
          startTestSuiteWithTestCaseInside();
          testSuiteAttributes = null;
        }
        startTestCaseElement(attributes);
        break;
      case "error":
        testResultSummarizer.xmlBody.append(">\n      <error>");
        inErrorOrFailureElement = true;
        testCaseHadErrorOrFailure = true;
        break;
      case "failure":
        testResultSummarizer.xmlBody.append(">\n      <failure>");
        inErrorOrFailureElement = true;
        testCaseHadErrorOrFailure = true;
        break;
      default:
        break;
    }

  }

  private void startTestCaseElement(final Attributes attributes) {
    String name = attributes.getValue("name");
    String classname = attributes.getValue("classname");
    String time = attributes.getValue("time");
    testResultSummarizer.xmlBody.append("    <testcase name=\"").append(name)
        .append("\" classname=\"").append(classname).append("\" time=\"").append(time).append("\"");

  }

  private void startTestSuiteWithTestCaseInside() {
    testResultSummarizer.tests += testSuiteAttributes.tests;
    testResultSummarizer.started += testSuiteAttributes.tests;
    testResultSummarizer.errors += testSuiteAttributes.errors;
    testResultSummarizer.failures += testSuiteAttributes.failures;
    testResultSummarizer.ignored += testSuiteAttributes.skipped;

    testResultSummarizer.xmlBody.append("  <testsuite name=\"").append(testSuiteAttributes.name)
        .append("\" time=\"").append(testSuiteAttributes.time).append("\">\n");
  }

}
